/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.66
 * Generated at: 2021-06-24 04:50:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class signup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<style>\r\n");
      out.write("body {font-family: Arial, Helvetica, sans-serif;}\r\n");
      out.write("* {box-sizing: border-box;}\r\n");
      out.write("input[type=text], select, textarea {\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  padding: 12px;\r\n");
      out.write("  border: 1px solid #ccc;\r\n");
      out.write("  border-radius: 4px;\r\n");
      out.write("  box-sizing: border-box;\r\n");
      out.write("  margin-top: 6px;\r\n");
      out.write("  margin-bottom: 16px;\r\n");
      out.write("  resize: vertical;\r\n");
      out.write("}\r\n");
      out.write("input[type=button] {\r\n");
      out.write("  background-color: #04AA6D;\r\n");
      out.write("  color: white;\r\n");
      out.write("  padding: 12px 20px;\r\n");
      out.write("  border: none;\r\n");
      out.write("  border-radius: 4px;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("input[type=button]:hover {\r\n");
      out.write("  background-color: #45a049;\r\n");
      out.write("}\r\n");
      out.write(".container {\r\n");
      out.write("  border-radius: 5px;\r\n");
      out.write("  background-color: #f2f2f2;\r\n");
      out.write("  padding: 20px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var valid=false;\r\n");
      out.write("$(function(){\r\n");
      out.write("	//버튼들에 이벤트 연결하기 \r\n");
      out.write("	$(\"#bt_check\").click(function(){\r\n");
      out.write("		checkId();	\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	$(\"#bt_regist\").click(function(){\r\n");
      out.write("		regist();\r\n");
      out.write("	});\r\n");
      out.write("});\r\n");
      out.write("//회원가입 전에 아이디 중복여부 체크\r\n");
      out.write("function checkId(){\r\n");
      out.write("	//동기방식으로 전송하게 되면 메인실행부가 서버의 응답이 있을때까지 대기 상태에 빠지고, 넘겨받은 컨텐츠를 이용하여\r\n");
      out.write("	//화면 전체를 갱신하기 때문에, 깜빡거림효과 즉 새로고침 효과가 생긴다..\r\n");
      out.write("	//해결책) 별도의 비동기 객체를 이용하여, 메인대신 비동기객체가 서버와의 통신을 담당하고 , 서버가 보내준 컨텐츠를\r\n");
      out.write("	//메인 실행부에 전달하면, 메인실행부는 이 컨텐츠를 DOM을 이용한 접근방법으로  HTML의 일부를 수정만 하면 되기때문에\r\n");
      out.write("	//전체 페이지가 아닌 부분적인 페이지의 갱신만 이루어진다..즉 새로고침이 일어나지 않는다!!(웹의 한계 극복)\r\n");
      out.write("	/*\r\n");
      out.write("	$(\"form\").attr({\r\n");
      out.write("		\"action\":\"/member/idcheck\",\r\n");
      out.write("		\"method\":\"post\"\r\n");
      out.write("	});\r\n");
      out.write("	$(\"form\").submit(); //전송\r\n");
      out.write("	*/\r\n");
      out.write("	\r\n");
      out.write("	//순수한 비동기객체인 XMLHttpRequest를 직접 사용할 수도 있으나, 처리 코드가 너무 번거롭기 때문에 \r\n");
      out.write("	//자바스크립트를 단순화 시켜놓은 프레임웍인 jquery의 ajax기능을 활용해보자\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url:\"/member/idcheck\", \r\n");
      out.write("		type:\"post\",\r\n");
      out.write("		data:{\r\n");
      out.write("			\"user_id\":$(\"input[name='user_id']\").val()\r\n");
      out.write("		},\r\n");
      out.write("		success:function(result, status, xhr){\r\n");
      out.write("			/*result:서버응답데이터, status:서버상태코드 , xhr(비동기통신객체)*/\r\n");
      out.write("			if(result==\"1\"){\r\n");
      out.write("				alert(\"이미 사용중인 아이디입니다\");\r\n");
      out.write("				valid=false;\r\n");
      out.write("			}else{\r\n");
      out.write("				alert(\"사용가능한 아이디 입니다\");\r\n");
      out.write("				valid=true;\r\n");
      out.write("			}\r\n");
      out.write("		},\r\n");
      out.write("		error:function(xhr,status,error){ // 서버의 상태코드가 에러일때..\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("function regist(){\r\n");
      out.write("	//동기 방식으로 등록 요청!! (왜? 가입후 메시지 출력한 다음, 로그인 페이지로 전환!! 즉 전체디자인의 변경이기 때문에)\r\n");
      out.write("	if(valid){ //사용가능한 아이디를 입력한 경우에만...\r\n");
      out.write("		$(\"form\").attr({\r\n");
      out.write("			\"action\":\"/member/regist.jsp\",\r\n");
      out.write("			\"method\":\"post\"\r\n");
      out.write("		});\r\n");
      out.write("		$(\"form\").submit(); //전송\r\n");
      out.write("	}else{\r\n");
      out.write("		alert(\"아이디 중복확인을 체크하세요\");\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h3>회원가입</h3>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("  <form>\r\n");
      out.write("    <input type=\"text\" name=\"user_id\" 			placeholder=\"Your ID..\" style=\"width:70%\">\r\n");
      out.write("    <input type=\"button\" value=\"ID중복확인\" id=\"bt_check\">\r\n");
      out.write("    \r\n");
      out.write("    <input type=\"text\" name=\"password\" 		placeholder=\"Your Password..\">\r\n");
      out.write("    <input type=\"text\" name=\"name\" 			placeholder=\"Your Name..\">\r\n");
      out.write("    <input type=\"button\" value=\"회원등록\" id=\"bt_regist\">\r\n");
      out.write("  </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
