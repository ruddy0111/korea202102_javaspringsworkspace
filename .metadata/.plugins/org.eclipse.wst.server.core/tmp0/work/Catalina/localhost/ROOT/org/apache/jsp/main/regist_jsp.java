/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.66
 * Generated at: 2021-06-29 08:10:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.main;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.koreait.tourapp.model.store.dao.MybatisStoreDAO;
import com.koreait.tourapp.model.store.dao.StoreDAO;
import com.koreait.tourapp.util.FileManager;
import com.koreait.tourapp.model.domain.Store;
import org.apache.commons.fileupload.FileItem;
import java.util.List;
import java.io.File;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

public final class regist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	StoreDAO storeDAO=new MybatisStoreDAO();

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.koreait.tourapp.model.store.dao.MybatisStoreDAO");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.apache.commons.fileupload.disk.DiskFileItemFactory");
    _jspx_imports_classes.add("com.koreait.tourapp.model.store.dao.StoreDAO");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("org.apache.commons.fileupload.servlet.ServletFileUpload");
    _jspx_imports_classes.add("com.koreait.tourapp.model.domain.Store");
    _jspx_imports_classes.add("com.koreait.tourapp.util.FileManager");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

	//service(HttpServletRequest request, HttpServletResponse response)
	//HttpServletRequest --> jsp에서 request 내장객체로 지원 
	//HttpServletResponse --> jsp에서 response 내장객체로 지원
	//ServletContext --> jsp에서 application 내장객체로 지원 
	request.setCharacterEncoding("utf-8");
	
	//클라이언트가 encoding을  multipart/form-data로 즉 바이너리 파일을 포함시켜 전송하므로 
	//파일 업로드를 처리하기 위해서는 개발자가 스트림등으로 세부처리를 해야하는데 , 업무가 커진다..
	//해결책) 전담 업로드 라이브러리인 업로드 컴포넌트를 이용하자!! 
	
	//파일용량, 파일저장위치 기타 설정을 위해서는 DiskFileItemFactory라는 설정 객체가 필요하다!!
	DiskFileItemFactory factory=new DiskFileItemFactory();
	//개발자가 실제 경로를 하드코딩하지 않기 위해서는 현재 어플리케이션의 전역적 정보를 가진 객체인 ServletContext의 getRealPath()
	//을 이용하면 되는데,...현재 이 파일은 서블릿이 아니므로, 난감하다..
	String realPath=application.getRealPath("/data"); //ServletContext의 getRealPath()호출과 같다!!!
	
	factory.setRepository(new File(realPath));//앞으로 업로드된 파일이 저장될 곳(디렉토리까지만 명시)!!!!!
	factory.setSizeThreshold(2*1024*1024); //2M까지 허용
	ServletFileUpload upload=new ServletFileUpload(factory);//설정 적용과 함께 업로드 객체 생성!!
	
	//각종 파라미터 및 파일저장 처리!!
	List<FileItem> items = upload.parseRequest(request);//업로드 분석
	
	Store store=new Store(); //empty vo
	
	for(FileItem item : items){
		if(item.isFormField()){//일반 텍스트 컴포넌트일 경우
			if(item.getFieldName().equals("title")){
				store.setTitle(item.getString("utf-8"));
			}else if(item.getFieldName().equals("content")){
				store.setContent(item.getString("utf-8"));
			}else if(item.getFieldName().equals("addr1")){
				store.setAddr1(item.getString("utf-8"));
			}else if(item.getFieldName().equals("mapx")){
				store.setMapx(Double.parseDouble(item.getString("utf-8")));
			}else if(item.getFieldName().equals("mapy")){
				store.setMapy(Double.parseDouble(item.getString("utf-8")));
			}
		}else{//파일 컴포넌트 일 경우
			long time = System.currentTimeMillis(); 
			String ext = FileManager.getExt(item.getName()); 
			
			String destName=time+"."+ext; //최종적으로 결정된 파일명
			
			item.write(new File(realPath+"/"+destName));
			store.setFirstimage(destName); //이 시점부터 vo 안의 모든  property에 데이터가 채워짐!! 
		}
	}
	//오라클에 insert !!!
	int result = storeDAO.insert(store);
	out.print(result);

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
