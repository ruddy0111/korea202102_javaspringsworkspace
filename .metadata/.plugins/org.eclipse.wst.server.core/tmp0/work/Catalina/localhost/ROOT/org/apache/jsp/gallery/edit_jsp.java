/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.66
 * Generated at: 2021-06-22 03:03:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.gallery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import site0617.model.domain.Gallery;
import site0617.model.gallery.dao.GalleryDAO;
import site0617.util.FileManager;
import java.io.File;
import com.oreilly.servlet.MultipartRequest;

public final class edit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

GalleryDAO galleryDAO=new GalleryDAO(); 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("site0617.model.domain.Gallery");
    _jspx_imports_classes.add("site0617.util.FileManager");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("site0617.model.gallery.dao.GalleryDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	//jsp에서는 서블릿에서 사용되는 여러객체들을 내장객체 형태로 즉 이름을 이미 부여해놓은 형태로 지원한다!!!
	//HttpServletRequest : 	request
	//HttpServletResponse : 	response
	//PrintWriter : 				out
	//ServletConext : 			application
	//멀티파트 객체는 생성자의 호출만으로도 업로드가 발생!!
	String path=application.getRealPath("/data");
	int maxSize=2*1024*1024;
	String encoding="utf-8";
	
	MultipartRequest multi=new MultipartRequest(request, path, maxSize, encoding);
	
	//유저가 업로드한 원본 파일명
	String myfile=multi.getOriginalFileName("myfile");//새롭게 업로드된 원본 파일명
	String filename=multi.getParameter("filename"); // hidden에 숨겨진 기존 파일명
	
	String title=multi.getParameter("title"); // hidden에 숨겨진 기존 파일명
	String writer=multi.getParameter("writer"); // hidden에 숨겨진 기존 파일명
	String content=multi.getParameter("content"); // hidden에 숨겨진 기존 파일명
	String gallery_id=multi.getParameter("gallery_id"); // hidden에 숨겨진 기존 파일명
	
	
	if(myfile!=null){
		out.print("파일 교체를 원하는 군요<br>");
		//기존 파일 삭제 + 새로운 업로드된 파일의 파일명을 현재날짜조합을 이용하여 rename
		File oldFile=new File(path+"/"+filename);
		if(oldFile.delete()){
			File newFile = multi.getFile("myfile"); //이미 data 디렉토리에 업로드된 파일(아직 현재날짜조합으로 처리 안되어있슴)
			long time=System.currentTimeMillis(); //새로운 파일명
			String ext=FileManager.getExt(myfile); //확장자
			boolean result = newFile.renameTo(new File(path+"/"+time+"."+ext));
			if(result){//파일명 교체가 완료되었다면 쿼리문 수행
				Gallery gallery = new Gallery();
				gallery.setTitle(title);
				gallery.setWriter(writer);
				gallery.setContent(content);
				gallery.setFilename(time+"."+ext);//주의!!
				gallery.setGallery_id(Integer.parseInt(gallery_id));
				
				galleryDAO.update(gallery); //쿼리실행
			}
		}
	}else{
		out.print("기존 파일을 유지하는 군요<br>");
		Gallery gallery = new Gallery();
		gallery.setTitle(title);
		gallery.setWriter(writer);
		gallery.setContent(content);
		gallery.setFilename(filename);//주의!!
		gallery.setGallery_id(Integer.parseInt(gallery_id));
		
		galleryDAO.update(gallery); //쿼리실행
	}
	//서블릿만사용할때는 아래처럼 반드시 가야하지만
	//jsp를 사용할경우 html과 혼용이 가능하므로, 스크립틀릿 바깥쪽에 자바스크립트를 명시하는 것이 더 편하다!!
	//out.print("<script>");
	//out.print("중간생략~~");
	//out.print("</script>");

      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("alert('수정완료');\r\n");
      out.write("location.href=\"/gallery/list.jsp\";\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
