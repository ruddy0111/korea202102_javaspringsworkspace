/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.66
 * Generated at: 2021-06-25 09:14:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.news;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.koreait.site0622.model.domain.News;
import com.koreait.site0622.model.news.dao.MybatisNewsDAO;
import com.koreait.site0622.model.news.dao.NewsDAO;

public final class detail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

NewsDAO newsDAO = new MybatisNewsDAO(); 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.koreait.site0622.model.news.dao.MybatisNewsDAO");
    _jspx_imports_classes.add("com.koreait.site0622.model.domain.News");
    _jspx_imports_classes.add("com.koreait.site0622.model.news.dao.NewsDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("  \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	int news_id = Integer.parseInt(request.getParameter("news_id"));
	News news = newsDAO.select(news_id);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<style>\r\n");
      out.write("body {font-family: Arial, Helvetica, sans-serif;}\r\n");
      out.write("* {box-sizing: border-box;}\r\n");
      out.write("input[type=text], select, textarea {\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  padding: 12px;\r\n");
      out.write("  border: 1px solid #ccc;\r\n");
      out.write("  border-radius: 4px;\r\n");
      out.write("  box-sizing: border-box;\r\n");
      out.write("  margin-top: 6px;\r\n");
      out.write("  margin-bottom: 16px;\r\n");
      out.write("  resize: vertical;\r\n");
      out.write("}\r\n");
      out.write("input[type=button] {\r\n");
      out.write("  background-color: #04AA6D;\r\n");
      out.write("  color: white;\r\n");
      out.write("  padding: 12px 20px;\r\n");
      out.write("  border: none;\r\n");
      out.write("  border-radius: 4px;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("input[type=button]:hover {\r\n");
      out.write("  background-color: #45a049;\r\n");
      out.write("}\r\n");
      out.write(".container {\r\n");
      out.write("  border-radius: 5px;\r\n");
      out.write("  background-color: #f2f2f2;\r\n");
      out.write("  padding: 20px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.ckeditor.com/4.16.1/standard/ckeditor.js\"></script>\r\n");
      out.write("<script src=\"https://unpkg.com/react@16/umd/react.production.min.js\"></script>\r\n");
      out.write("<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"></script>\r\n");
      out.write("<script src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script src=\"/js/Comments.js\"></script>\r\n");
      out.write("<script type=\"text/babel\">\r\n");
      out.write("	class CustomComments extends React.Component{\r\n");
      out.write("		render(){\r\n");
      out.write("			//return 영역 밖에서 원하는 태그를 구성한 후, 완성된 태그를 return안에서 사용하면 된다..\r\n");
      out.write("			var tag=[];\r\n");
      out.write("			for(var i=0;i<this.props.result.commentsList.length;i++){\r\n");
      out.write("				var obj=this.props.result.commentsList[i];\r\n");
      out.write("				tag.push(\r\n");
      out.write("				<div>\r\n");
      out.write("					<input type=\"text\" value={obj.msg} style={{width:\"60%\"}}/>\r\n");
      out.write("					<input type=\"text\" value={obj.cwriter} style={{width:\"20%\"}}/>\r\n");
      out.write("					<input type=\"text\" value={obj.cdate} style={{width:\"15%\"}}/>\r\n");
      out.write("				</div>\r\n");
      out.write("				);\r\n");
      out.write("			}\r\n");
      out.write("			return 	<div>						\r\n");
      out.write("							{tag}\r\n");
      out.write("						</div>\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("$(function(){\r\n");
      out.write("	\r\n");
      out.write("	CKEDITOR.replace(\"content\");\r\n");
      out.write("	\r\n");
      out.write("	var bt_list=$(\"input[type='button']\")[0]; //목록\r\n");
      out.write("	var bt_edit=$(\"input[type='button']\")[1];//수정\r\n");
      out.write("	var bt_del=$(\"input[type='button']\")[2];//삭제\r\n");
      out.write("	\r\n");
      out.write("	//버튼에 이벤트 연결하기 \r\n");
      out.write("	$(bt_list).click(function(){\r\n");
      out.write("		location.href=\"/news/list.jsp\";	\r\n");
      out.write("	});\r\n");
      out.write("	$(bt_edit).click(function(){\r\n");
      out.write("		//regist();	\r\n");
      out.write("	});\r\n");
      out.write("	$(bt_del).click(function(){\r\n");
      out.write("		//regist();	\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	//방법3) React의 컴포넌트를 이용하는 법 \r\n");
      out.write("	getCommentsList();//상세보기가 로드되면, 댓글 리스트 가져오기\r\n");
      out.write("});\r\n");
      out.write("//수정요청\r\n");
      out.write("function edit(){\r\n");
      out.write("	$(\"#form1\").attr({\r\n");
      out.write("		\"action\":\"\",\r\n");
      out.write("		\"method\":\"post\"\r\n");
      out.write("	});	\r\n");
      out.write("	$(\"#form1\").submit();\r\n");
      out.write("}\r\n");
      out.write("//댓글 등록(새로고침 없이!! 즉 비동기로 처리)\r\n");
      out.write("function registComments(){\r\n");
      out.write("	var formdata = $(\"#form2\").serialize(); //폼양식을 전송할 수 있는 문자열로 변환\r\n");
      out.write("	\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url:\"/comments/regist\",\r\n");
      out.write("		type:\"post\", \r\n");
      out.write("		data:formdata,//폼을 전송할 수 있는 데이터화 시킨후, 자체를 전부 전송\r\n");
      out.write("		success:function(result, status, xhr){\r\n");
      out.write("			if(result==1){\r\n");
      out.write("				//댓글 목록가져와서 동적으로 늘려나가기\r\n");
      out.write("				getCommentsList();//현재 뉴스기사에 딸린, 댓글 가져오기 \r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("function getCommentsList(){\r\n");
      out.write("	//비동기방식으로 댓글 리스트 요청하자!!!\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url:\"/comments/list?news_id=");
      out.print(news.getNews_id());
      out.write("\",\r\n");
      out.write("		type:\"get\",\r\n");
      out.write("		success:function(result, status, xhr){\r\n");
      out.write("			//넘겨받은 데이터가 string일 경우 json으로 파싱하자\r\n");
      out.write("			//var json = JSON.parse(result);\r\n");
      out.write("			//console.log(json.commentsList.length);\r\n");
      out.write("			\r\n");
      out.write("			//넘겨받은 데이터가 json 자체일 경우는 파싱할 필요없다\r\n");
      out.write("			console.log(result);	\r\n");
      out.write("			ReactDOM.render(<CustomComments result={result}/> , document.getElementById(\"commentsArea\"))\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("//댓글 목록 출력하기 (방법1: 출력대상 컨텐츠를 문자열로 처리하는 방법 유지보수가 까다롭다.)\r\n");
      out.write("function printCommentsList(json){ //js는 자료형이 존재하지 않음 (자바랑 틀림)\r\n");
      out.write("	$(\"#commentsArea\").html(\"\");//기존의 commentsArea의 컨텐츠를 초기화!!(div에서 제거 )\r\n");
      out.write("	\r\n");
      out.write("	var tag=\"\";\r\n");
      out.write("	\r\n");
      out.write("	for(var i=0;i<json.commentsList.length;i++){\r\n");
      out.write("		var comments = json.commentsList[i]; //댓글 하나 꺼내기\r\n");
      out.write("		tag+=\"<div>\";\r\n");
      out.write("		tag+=\"<input type=\\\"text\\\" value=\\\"\"+comments.msg+\"\\\" style=\\\"width:60%\\\" readonly>\";\r\n");
      out.write("		tag+=\"<input type=\\\"text\\\" value=\\\"\"+comments.cwriter+\"\\\" style=\\\"width:20%\\\" readonly>\";\r\n");
      out.write("		tag+=\"<input type=\\\"text\\\" value=\\\"\"+comments.cdate+\"\\\" style=\\\"width:10%\\\" readonly>\";\r\n");
      out.write("		tag+=\"</div>\";\r\n");
      out.write("	}\r\n");
      out.write("	/*\r\n");
      out.write("	자바스크립트로 구현\r\n");
      out.write("	var commentsArea=document.getElementById(\"commentsArea\");\r\n");
      out.write("	commentsArea.innerHTML=tag;\r\n");
      out.write("	*/\r\n");
      out.write("	\r\n");
      out.write("	//jquery 로 구현\r\n");
      out.write("	$(\"#commentsArea\").append(tag);\r\n");
      out.write("}\r\n");
      out.write("//방법2)  출력대상이 되는 태그를 객체로 처리하는 법 \r\n");
      out.write("function printCommentsList2(json){\r\n");
      out.write("	$(\"#commentsArea\").html(\"\");//기존에 데이터 삭제 \r\n");
      out.write("	\r\n");
      out.write("	for(var i=0;i<json.commentsList.length;i++){\r\n");
      out.write("		var obj=json.commentsList[i];\r\n");
      out.write("		var comments=new Comments(document.getElementById(\"commentsArea\"),obj.msg, obj.cwriter, obj.cdate);\r\n");
      out.write("	}	\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h3>상세보기</h3>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("  <form id=\"form1\">\r\n");
      out.write("    <input type=\"hidden\" 	name=\"news_id\" 	value=\"");
      out.print(news.getNews_id());
      out.write("\">\r\n");
      out.write("    <input type=\"text\" 	name=\"title\" 			value=\"");
      out.print(news.getTitle());
      out.write("\">\r\n");
      out.write("    <input type=\"text\" 	name=\"writer\" 		value=\"");
      out.print(news.getWriter());
      out.write("\">\r\n");
      out.write("    <textarea 				name=\"content\" 	style=\"height:200px\">");
      out.print(news.getContent());
      out.write("</textarea>\r\n");
      out.write("    <input type=\"button\" value=\"목록\">\r\n");
      out.write("    <input type=\"button\" value=\"수정\">\r\n");
      out.write("    <input type=\"button\" value=\"삭제\">\r\n");
      out.write("  </form>\r\n");
      out.write("</div>\r\n");
      out.write("<div>\r\n");
      out.write("	<form id=\"form2\">\r\n");
      out.write("		<input type=\"hidden\" 	name=\"news_id\" 	value=\"");
      out.print(news.getNews_id());
      out.write("\">\r\n");
      out.write("		<input type=\"text\" name=\"msg\" 		placeholder=\"댓글 메시지...\" style=\"width:60%\">\r\n");
      out.write("		<input type=\"text\" name=\"cwriter\" 	placeholder=\"작성자...\" style=\"width:20%\">\r\n");
      out.write("		<input type=\"button\" value=\"댓글등록\"  style=\"width:10%\" onClick=\"registComments()\">\r\n");
      out.write("	</form>\r\n");
      out.write("</div>\r\n");
      out.write("<div id=\"commentsArea\"> \r\n");
      out.write("	\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
